import sys
config(channel is fifo, clock is lamport)

#simple separation of the mutex algo

class P(process):
    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()

    def task():
        output('helper function - task')
        -- critical_section
        output('in cs')

    def requestCS():
        output('helper function - requestCS')

        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        await(
            # tuple is either self or the one with smallest timestamp
            each(('request', c2, p) in q, has= (c2, p)==(c, self) or (c, self) < (c2, p)) 
            and 
            # each process has sent ack to p and timestamp of ack are more than the req timestamp
            each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c))
            )
        task()
        releaseCS(c)

    def releaseCS(c):
        output('helper function - releaseCS')

        -- release
        q.remove(('request', c, self))
        send(('release', logical_clock(), self), to= s)   

    def receive(msg= ('request', c2, p)):
        output('handler function receive - request')

        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release', _, p)):
        output('handler function receive - release')

        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x)
            break

    def run():
        output('helper function - run')

        for i in range(nrequests):
            requestCS()

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        output('terminating')

def main():
    output('main function - *****************************************************************')

    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    ps = new(P, num=nprocs)
    for p in ps: setup(p, (ps-{p}, nrequests))
    start(ps)
    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
